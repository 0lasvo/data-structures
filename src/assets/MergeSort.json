[
  {
    "title": "Merge Sort",
    "code": "#include <stdio.h>\n\nvoid merge(int arr[], int l, int m, int r) {\n    int i, j, k;\n    int n1 = m - l + 1;\n    int n2 = r - m;\n    int L[n1], R[n2];\n    for (i = 0; i < n1; i++)\n        L[i] = arr[l + i];\n    for (j = 0; j < n2; j++)\n        R[j] = arr[m + 1+ j];\n    i = 0; j = 0; k = l;\n    while (i < n1 && j < n2) {\n        if (L[i] <= R[j]) {\n            arr[k] = L[i];\n            i++;\n        } else {\n            arr[k] = R[j];\n            j++;\n        }\n        k++;\n    }\n    while (i < n1) {\n        arr[k] = L[i];\n        i++;\n        k++;\n    }\n    while (j < n2) {\n        arr[k] = R[j];\n        j++;\n        k++;\n    }\n}\n\nvoid mergeSort(int arr[], int l, int r) {\n    if (l < r) {\n        int m = l+(r-l)/2;\n        mergeSort(arr, l, m);\n        mergeSort(arr, m+1, r);\n        merge(arr, l, m, r);\n    }\n}\n\nint main() {\n    int arr[] = {12, 11, 13, 5, 6, 7};\n    int arr_size = sizeof(arr)/sizeof(arr[0]);\n    mergeSort(arr, 0, arr_size - 1);\n    printf(\"Sorted array is \\n\");\n    for (int i=0; i < arr_size; i++)\n        printf(\"%d \", arr[i]);\n    printf(\"\\n\");\n    return 0;\n}",
    "sources": "https://www.geeksforgeeks.org/merge-sort/",
    "inPutData": {
      "images":[]
    },
    "outPutData": {
      "images":[]
    },
    "data":[
      {
        "subtitle":"Teoría",
        "body": "Merge Sort es un algoritmo de ordenamiento basado en la técnica de divide y vencerás. Divide la lista en sublistas más pequeñas, las ordena y luego las fusiona para formar una lista ordenada. Es muy eficiente para listas grandes con una complejidad O(n log n).",
        "images": []
      }
    ]
  }
]
