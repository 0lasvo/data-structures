[
  {
    "title": "Árbol Binario de Búsqueda (BST)",
    "sources": "https://www.geeksforgeeks.org/binary-search-tree-data-structure/",
    "inPutData": {
      "images": []
    },
    "outPutData": {
      "images": []
    },
    "data": [
      {
        "subtitle": "¿Qué es un Árbol Binario de Búsqueda (BST)?",
        "body": "Un Árbol Binario de Búsqueda es una estructura de datos jerárquica donde cada nodo cumple la regla: los valores menores que el nodo están en el subárbol izquierdo y los valores mayores en el subárbol derecho. Es eficiente para búsquedas, inserciones y eliminaciones, con una complejidad promedio de O(log n).",
        "images": [],
        "videos": [
          "./assets/videos/AX.mp4"
        ],
        "code": [
          {
            "title": "Implementación de un Árbol Binario de Búsqueda (BST)",
            "code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node* left;\n    struct Node* right;\n};\n\nstruct Node* createNode(int data) {\n    struct Node* node = (struct Node*)malloc(sizeof(struct Node));\n    node->data = data;\n    node->left = NULL;\n    node->right = NULL;\n    return node;\n}\n\nstruct Node* insert(struct Node* node, int data) {\n    if (node == NULL) return createNode(data);\n    if (data < node->data)\n        node->left = insert(node->left, data);\n    else if (data > node->data)\n        node->right = insert(node->right, data);\n    return node;\n}\n\nvoid inOrderTraversal(struct Node* root) {\n    if (root != NULL) {\n        inOrderTraversal(root->left);\n        printf(\"%d \", root->data);\n        inOrderTraversal(root->right);\n    }\n}\n\nint main() {\n    struct Node* root = NULL;\n    root = insert(root, 50);\n    insert(root, 30);\n    insert(root, 20);\n    insert(root, 40);\n    insert(root, 70);\n    insert(root, 60);\n    insert(root, 80);\n\n    printf(\"Recorrido en inorden del BST: \\n\");\n    inOrderTraversal(root);\n\n    return 0;\n}"
          }
        ]
      }
    ]
  },
  {
    "title": "Árbol AVL",
    "sources": "https://www.geeksforgeeks.org/avl-tree-set-1-insertion/",
    "inPutData": {
      "images": []
    },
    "outPutData": {
      "images": []
    },
    "data": [
      {
        "subtitle": "¿Qué es un Árbol AVL?",
        "body": "Un Árbol AVL es un tipo de árbol binario de búsqueda balanceado donde la diferencia de alturas entre los subárboles izquierdo y derecho de cualquier nodo no puede ser mayor a 1. Esto garantiza que las operaciones de búsqueda, inserción y eliminación sean eficientes, con una complejidad de O(log n).",
        "images": [],
        "videos": [
          "./assets/videos/AY.mp4"
        ],
        "code": [
          {
            "title": "Implementación de un Árbol AVL",
            "code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node* left;\n    struct Node* right;\n    int height;\n};\n\nint max(int a, int b) {\n    return (a > b) ? a : b;\n}\n\nint height(struct Node* N) {\n    return (N == NULL) ? 0 : N->height;\n}\n\nstruct Node* createNode(int data) {\n    struct Node* node = (struct Node*)malloc(sizeof(struct Node));\n    node->data = data;\n    node->left = NULL;\n    node->right = NULL;\n    node->height = 1;\n    return node;\n}\n\nstruct Node* rightRotate(struct Node* y) {\n    struct Node* x = y->left;\n    struct Node* T2 = x->right;\n\n    x->right = y;\n    y->left = T2;\n\n    y->height = max(height(y->left), height(y->right)) + 1;\n    x->height = max(height(x->left), height(x->right)) + 1;\n\n    return x;\n}\n\nstruct Node* leftRotate(struct Node* x) {\n    struct Node* y = x->right;\n    struct Node* T2 = y->left;\n\n    y->left = x;\n    x->right = T2;\n\n    x->height = max(height(x->left), height(x->right)) + 1;\n    y->height = max(height(y->left), height(y->right)) + 1;\n\n    return y;\n}\n\nint getBalance(struct Node* N) {\n    return (N == NULL) ? 0 : height(N->left) - height(N->right);\n}\n\nstruct Node* insert(struct Node* node, int data) {\n    if (node == NULL) return createNode(data);\n\n    if (data < node->data)\n        node->left = insert(node->left, data);\n    else if (data > node->data)\n        node->right = insert(node->right, data);\n    else\n        return node;\n\n    node->height = 1 + max(height(node->left), height(node->right));\n\n    int balance = getBalance(node);\n\n    if (balance > 1 && data < node->left->data)\n        return rightRotate(node);\n\n    if (balance < -1 && data > node->right->data)\n        return leftRotate(node);\n\n    if (balance > 1 && data > node->left->data) {\n        node->left = leftRotate(node->left);\n        return rightRotate(node);\n    }\n\n    if (balance < -1 && data < node->right->data) {\n        node->right = rightRotate(node->right);\n        return leftRotate(node);\n    }\n\n    return node;\n}\n\nvoid inOrderTraversal(struct Node* root) {\n    if (root != NULL) {\n        inOrderTraversal(root->left);\n        printf(\"%d \", root->data);\n        inOrderTraversal(root->right);\n    }\n}\n\nint main() {\n    struct Node* root = NULL;\n\n    root = insert(root, 10);\n    root = insert(root, 20);\n    root = insert(root, 30);\n    root = insert(root, 40);\n    root = insert(root, 50);\n    root = insert(root, 25);\n\n    printf(\"Recorrido en inorden del AVL: \\n\");\n    inOrderTraversal(root);\n\n    return 0;\n}"
          }
        ]
      }
    ]
  }
]
