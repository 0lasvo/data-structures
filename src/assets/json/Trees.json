[
  {
    "title": "Árboles en C",
    "sources": "https://www.geeksforgeeks.org/tree-data-structure/",
    "inPutData": {
      "images": []
    },
    "outPutData": {
      "images": []
    },
    "data": [
      {
        "subtitle": "¿Qué son los árboles?",
        "body": "Un árbol es una estructura de datos jerárquica no lineal que consta de nodos conectados por aristas. El nodo principal se llama raíz, y cada nodo puede tener nodos secundarios llamados hijos. En lenguaje C, los árboles son implementados utilizando estructuras (struct) y punteros.",
        "images": []
      },
      {
        "subtitle": "Árbol Binario",
        "body": "Un árbol binario es una estructura donde cada nodo tiene como máximo dos hijos, denominados hijo izquierdo y derecho.",
        "code": [
          {
            "title": "Implementación básica de un Árbol Binario",
            "code": "#include <stdio.h>\n#include <stdlib.h>\n\n// Definición del nodo del árbol\nstruct Node {\n    int data;\n    struct Node* left;\n    struct Node* right;\n};\n\n// Función para crear un nuevo nodo\nstruct Node* createNode(int data) {\n    struct Node* node = (struct Node*)malloc(sizeof(struct Node));\n    node->data = data;\n    node->left = NULL;\n    node->right = NULL;\n    return node;\n}\n\n// Recorrido en preorden\nvoid preOrderTraversal(struct Node* root) {\n    if (root != NULL) {\n        printf(\"%d \", root->data);\n        preOrderTraversal(root->left);\n        preOrderTraversal(root->right);\n    }\n}\n\nint main() {\n    struct Node* root = createNode(1);\n    root->left = createNode(2);\n    root->right = createNode(3);\n    root->left->left = createNode(4);\n    root->left->right = createNode(5);\n\n    printf(\"Recorrido en preorden del árbol: \\n\");\n    preOrderTraversal(root);\n\n    return 0;\n}"
          }
        ]
      },
      {
        "subtitle": "Árbol Binario de Búsqueda (BST)",
        "body": "Un Árbol Binario de Búsqueda es una estructura en la que cada nodo sigue la regla: los valores menores que el nodo se colocan en el subárbol izquierdo y los valores mayores en el subárbol derecho.",
        "code": [
          {
            "title": "Implementación de un BST",
            "code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node* left;\n    struct Node* right;\n};\n\nstruct Node* createNode(int data) {\n    struct Node* node = (struct Node*)malloc(sizeof(struct Node));\n    node->data = data;\n    node->left = NULL;\n    node->right = NULL;\n    return node;\n}\n\nstruct Node* insert(struct Node* node, int data) {\n    if (node == NULL) return createNode(data);\n    if (data < node->data)\n        node->left = insert(node->left, data);\n    else if (data > node->data)\n        node->right = insert(node->right, data);\n    return node;\n}\n\nvoid inOrderTraversal(struct Node* root) {\n    if (root != NULL) {\n        inOrderTraversal(root->left);\n        printf(\"%d \", root->data);\n        inOrderTraversal(root->right);\n    }\n}\n\nint main() {\n    struct Node* root = NULL;\n    root = insert(root, 50);\n    insert(root, 30);\n    insert(root, 20);\n    insert(root, 40);\n    insert(root, 70);\n    insert(root, 60);\n    insert(root, 80);\n\n    printf(\"Recorrido en inorden del BST: \\n\");\n    inOrderTraversal(root);\n\n    return 0;\n}"
          }
        ]
      }
    ]
  }
]
