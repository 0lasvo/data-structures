[
  {
    "title": "Insertion Sort",
    "code": "#include <stdio.h>\n\nvoid insertionSort(int arr[], int n) {\n    int i, key, j;\n    for (i = 1; i < n; i++) {\n        key = arr[i];\n        j = i - 1;\n        while (j >= 0 && arr[j] > key) {\n            arr[j + 1] = arr[j];\n            j = j - 1;\n        }\n        arr[j + 1] = key;\n    }\n}\n\nint main() {\n    int arr[] = {12, 11, 13, 5, 6};\n    int n = sizeof(arr)/sizeof(arr[0]);\n    insertionSort(arr, n);\n    printf(\"Sorted array: \\n\");\n    for (int i = 0; i < n; i++)\n        printf(\"%d \", arr[i]);\n    printf(\"\\n\");\n    return 0;\n}",
    "sources": "https://www.geeksforgeeks.org/insertion-sort/",
    "inPutData": {
      "images":[]
    },
    "outPutData": {
      "images":[]
    },
    "data":[
      {
        "subtitle":"Teoría",
        "body": "Insertion Sort es un algoritmo que construye la lista ordenada uno por uno, insertando cada nuevo elemento en su posición correcta dentro de la sublista previamente ordenada. Es más eficiente que otros algoritmos de complejidad O(n^2) para listas pequeñas o casi ordenadas.",
        "images": []
      }
    ]
  }
]
